name: Django CI/CD  
on:  
  push:  
    branches: [ main ] 


jobs:  
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        db: [postgres]
        python-version: ["3.10"]  # Specify a Python version that is available
        include:
          - db: postgres
            db_port: 5432
    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_USER: katyush2_admin
          POSTGRES_PASSWORD: katyusha@dmin2023
          POSTGRES_DB: katyush2_db
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2  # Use v2 with a more recent Python version
      with:
        python-version: ${{ matrix.python-version }}

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Check Database Connection
      run: |
        # Replace with your Django manage.py command that checks the database connection
        python manage.py check_db_connection

    - name: Run Tests
      env:
        DB: 'postgres'
        DB_HOST: 'localhost'
        DB_PORT: '5432'
        DB_PASSWORD: 'katyusha@dmin2023'
      run: |
        pytest


  deploy:  
    needs: build-and-test  
    runs-on: ubuntu-latest  
    if: github.ref == 'refs/heads/master'  
    steps:  
    - name: Checkout code  
      uses: actions/checkout@v2  

    - name: Setup SSH  
      uses: webfactory/ssh-agent@v0.5.0  
      with:  
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}  

    - name: Deploy to VPS  
      run: |  
        ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} -p ${{ secrets.VPS_PORT }} <<EOF  
          cd /path/to/your/project  
          docker-compose -f docker-compose.yml down  
          git pull  
          docker-compose -f docker-compose.yml up --build -d  
        EOF
